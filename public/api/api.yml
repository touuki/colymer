swagger: "2.0"
info:
  description: "Lightweight Content Polymerizing Engine & Management System"
  title: "Colymer API"
  version: "1.0"
basePath: /api
tags:
  - name: document
    description: "A document contains content, metadata and archives."
  - name: content
    description: "A single content item such as a web page, an article, an email or a tweet etc."
  - name: archive
    description: "History version of the content."
  - name: attachment
    description: "Attachment of the document."
  - name: metadata
parameters:
  collection:
    name: "collection"
    in: "path"
    description: "Collection name"
    required: true
    type: "string"
  id:
    name: "id"
    in: "path"
    description: "Document id"
    required: true
    type: "string"
produces:
- "application/json"
consumes:
- "application/json"
paths:
  /document/{collection}/{id}:
    parameters:
      - $ref: "#/parameters/collection"
      - $ref: "#/parameters/id"
    delete:
      tags:
        - document
      summary: "Delete document"
      description: "Delete document"
      operationId: "deleteDocument"
      responses:
        204:
          description: "OK"
        404:
          description: "Not Found"
        500:
          description: "Error"
  /document/{collection}/{id}/content:
    parameters:
      - $ref: "#/parameters/collection"
      - $ref: "#/parameters/id"
    get:
      tags: 
        - content
      summary: "Get content"
      description: "Get content"
      operationId: "getContent"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Content"
        404:
          description: "Not Found"
        500:
          description: "Error"
    post:
      tags: 
        - content
      summary: "Insert/Update (archive) content"
      description: "Insert/Update content. It will archive the original content into `archives` if the content already exists."
      operationId: "postContent"
      parameters:
      - name: "body"
        in: "body"
        description: "Content object"
        required: true
        schema:
          $ref: "#/definitions/Content"
      responses:
        201:
          description: "Created"
        204:
          description: "Updated"
        400:
          description: "Invalid Input"
        500:
          description: "Error"
        503:
          description: "Try again"
    put:
      tags: 
        - content
      summary: "Insert/Update (no archive) content"
      description: "Insert/Update content. It will not archive the original content if the content already exists."
      operationId: "putContent"
      parameters:
      - name: "body"
        in: "body"
        description: "Content object"
        schema:
          $ref: "#/definitions/Content"
      responses:
        201:
          description: "Created"
        204:
          description: "Updated"
        400:
          description: "Invalid Input"
        409:
          description: "Conflict"
        500:
          description: "Error"
  /document/{collection}/{id}/archive-count:
    parameters:
      - $ref: "#/parameters/collection"
      - $ref: "#/parameters/id"
    get:
      tags: 
        - archive
      summary: "Get archive count"
      description: "Get archive count"
      operationId: "getArchiveCount"
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            properties:
              archive_count:
                type: "integer"
        404:
          description: "Not Found"
        500:
          description: "Error"
  /document/{collection}/{id}/archives:
    parameters:
      - $ref: "#/parameters/collection"
      - $ref: "#/parameters/id"
    get:
      tags: 
        - archive
      summary: "Get archive array"
      description: "Get archive array"
      operationId: "getArchives"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Content"
        404:
          description: "Not Found"
        500:
          description: "Error"
  /document/{collection}/{id}/archive/{index}:
    parameters:
      - $ref: "#/parameters/collection"
      - $ref: "#/parameters/id"
    get:
      tags: 
        - archive
      summary: "Get specific archive"
      description: "Get specific archive version"
      operationId: "getArchive"
      parameters:
      - name: "index"
        in: "path"
        description: "Index in archive array"
        required: true
        type: "integer"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Content"
        400:
          description: "Invalid Input"
        404:
          description: "Not Found"
        500:
          description: "Error"
  /document/{collection}/{id}/attachment-upload-method:
    parameters:
      - $ref: "#/parameters/collection"
      - $ref: "#/parameters/id"
    get:
      tags:
        - attachment
      summary: "Get the upload method of the attachment"
      description: "Get the upload method of the attachment"
      operationId: "getUploadUrl"
      parameters:
        - name: "filename"
          in: "query"
          description: "File's name"
          required: true
          type: "string"
        - name: "isFormData"
          in: "query"
          description: "Whether use multipart/form-data to upload file or not"
          type: "boolean"
          default: false
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            properties:
              method:
                type: "string"
                enum:
                  - POST
                  - PUT
              url:
                type: "string"
              headers:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      type: "string"
                    value:
                      type: "string"
              formData:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      type: "string"
                    value:
                      type: "string"
              formField:
                type: "string"
              cid:
                type: "string"
        400:
          description: "Invalid Input"
        500:
          description: "Error"
  /document/{collection}/{id}/attachment/{cid}:
    parameters:
      - $ref: "#/parameters/collection"
      - $ref: "#/parameters/id"
      - name: "cid"
        in: "path"
        description: "Content ID"
        required: true
        type: "string"
    get:
      tags:
        - attachment
      summary: "Get attachment"
      description: "Get attachment"
      operationId: "getAttachment"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
            format: "binary"
        302:
          description: "Found"
        500:
          description: "Error"
    post:
      tags:
        - attachment
      summary: "Upload attachment through formData"
      description: "Upload attachment through formData (multipart/form-data)"
      operationId: "postAttachment"
      consumes:
        - multipart/form-data
      parameters:
        - name: "file"
          in: "formData"
          description: "Attachment file"
          required: true
          type: "file"
      responses:
        201:
          description: "Created"
        409:
          description: "File exist"
        500:
          description: "Error"
    put:
      tags:
        - attachment
      summary: "Upload attachment directly"
      description: "Upload attachment by FileReader or non-browser."
      operationId: "putAttachment"
      consumes:
        - application/octet-stream
      responses:
        201:
          description: "Created"
        409:
          description: "File exist"
        500:
          description: "Error"
definitions:
  Content:
    type: "object"
    properties:
      author_id:
        type: "string"
      author_name:
        type: "string"
      is_html:
        type: "boolean"
        default: false
      title:
        type: "string"
      text:
        type: "string"
      time:
        type: "string"
        format: "date-time"
      category:
        type: "string"
      original_url:
        type: "string"
      labels:
        type: "array"
        items: 
          type: "string"
      attachments:
        type: "array"
        items:
          type: "object"
          properties:
            url:
              type: "string"
              readOnly: true
            original_url:
              type: "string"
            cid:
              type: "string"
            content_type:
              type: "string"
          required:
            - cid
      version:
        description: "Optimistic locking. Required for `PUT` update."
        type: "integer"
    required:
      - title
      - text
      - time
  Document:
    type: "object"
    properties:
      _id:
        type: "string"
      content:
        $ref: "#/definitions/Content"
      metadata:
        type: "object"
        description: "Custom data. It can be used to organize the relationship between the content, store the raw data, or classify the content etc. The fields starting with `_` should be reserved for extension."
      archives:
        type: "array"
        items:
          $ref: "#/definitions/Content"
      archive_count:
        type: "integer"