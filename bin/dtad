#!/usr/bin/env node

//dtad: directly transferring attachment downloader

const fs = require('fs');
const path = require('path');
const request = require('request');
const fetch = require('node-fetch');
const http = require('http');
const https = require('https');
const pac = require('pac-resolver');

const config = require('../config').downloader;

let nodeId;
let running_tasks = 0;

const FindProxyForURL = config.pac ? pac(fs.readFileSync(path.isAbsolute(config.pac) ?
  config.pac : path.join(__dirname, '..', config.pac))) : undefined;

const httpAgent = new http.Agent({
  keepAlive: true
});
const httpsAgent = new https.Agent({
  keepAlive: true
});

const agent = function (_parsedURL) {
  if (_parsedURL.protocol == 'http:') {
    return httpAgent;
  } else {
    return httpsAgent;
  }
}

const sleep = function (time = 0) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve();
    }, time);
  })
};

require('../mongo').init(async function (error, db) {
  try {
    if (error) throw error;

    const url = new URL('download/', config.api_prefix);
    const method = 'POST';
    const response = await fetch(url, { method, agent });
    if (!response.ok) throw new Error(`${method} ${url} unexpected response ${response.status} ${response.statusText} ${await response.text()}`);
    const body = await response.json();
    nodeId = body._id;
    if (!nodeId) throw new Error('No nodeId is returned');

    setInterval(async () => {
      try {
        const url = new URL(`download/${nodeId}`, config.api_prefix);
        const method = 'PUT';
        const response = await fetch(url, { method, agent });
        if (!response.ok) throw new Error(`${method} ${url} unexpected response ${response.status} ${response.statusText} ${await response.text()}`);
      } catch (error) {
        console.error(error);
      }
    }, config.keep_alive * 1000);

    while (true) {
      if (running_tasks < config.parallel_count) {
        const data = await accept();
        if (data) {
          running_tasks++;
          (async (data) => await finish(data._id, await transfer(data)))(data)
            .then(() => running_tasks--)
            .catch((error) => {
              console.error(error);
              exit();
            });
        } else {
          await sleep(config.check_interval * 1000);
        }
      } else {
        await sleep(500);
      }
    }
  } catch (error) {
    console.error(error);
    exit();
  }
});

process.on('SIGINT', exit);
process.on('SIGTERM', exit);

function exit() {
  if (nodeId) {
    const url = new URL(`download/${nodeId}`, config.api_prefix);
    const method = 'DELETE';
    fetch(url, { method, agent })
      .then((response) => {
        if (!response.ok) console.error(new Error(`${method} ${url} unexpected response ${response.status} ${response.statusText}`));
        process.exit();
      })
      .catch((error) => {
        console.error(error);
        process.exit();
      });
  } else {
    process.exit();
  }
}

async function accept() {
  const url = new URL(`download/${nodeId}/accept`, config.api_prefix);
  url.searchParams.set('directly_transfer', true);
  const method = 'POST';
  const response = await fetch(url, { method, agent });
  if (!response.ok) {
    if (response.status == 404) {
      return null;
    } else {
      throw new Error(`${method} ${url} unexpected response ${response.status} ${response.statusText} ${await response.text()}`);
    }
  }
  return await response.json();
}

async function transfer(data) {
  if (!data.persist_info.overwrite) {
    const method = 'HEAD';
    const response = await fetch(data.url, { method, agent });
    if (response.ok) {
      return null;
    }
  }
  const headers = {
    ...config.options.headers,
  };
  if (data.persist_info.referer) {
    headers['Referer'] = data.persist_info.referer;
  }

  const options = { ...config.options, url: data.original_url, headers };
  if (!data.persist_info.follow_redirect) {
    options.followRedirect = false;
  }
  if (FindProxyForURL) {
    const proxys = (await FindProxyForURL(data.original_url)).split(';');
    for (const proxy of proxys) {
      const [protocol, address] = proxy.trim().split(' ');
      if (protocol == 'DIRECT') {
        delete options.proxy;
        break;
      } else if (protocol == 'PROXY' || protocol == 'HTTP') {
        options.proxy = `http://${address}`;
        break;
      }
    }
  }

  return new Promise((resolve, reject) => {
    const req = request.get(options);

    req.on('error', reject);

    req.on('response', function (res) {
      try {
        if (res.statusCode == 200) {
          req.pipe(request(data.upload_options, function (error, response, body) {
            if (error) return reject(error);
            if (response.statusCode >= 200 && response.statusCode < 300) {
              resolve()
            } else {
              reject(new Error(`HTTP Code: ${response.statusCode} ${response.statusMessage} Body: ${body}`));
            }
          }));
        } else {
          req.destroy();
          resolve(`HTTP Code: ${response.statusCode} ${response.statusMessage} location: ${res.headers.location}`);
        }
      } catch (error) {
        reject(error)
      }
    });
  });
}

async function finish(taskId, error) {
  const url = new URL(`download/${nodeId}/finish/${taskId}`, config.api_prefix);
  if (error) {
    url.searchParams.set('error', error);
  }
  const method = 'POST';
  const response = await fetch(url, { method, agent });
  if (!response.ok) {
    if (response.status == 404) {
      console.error(new Error(`${method} ${url} unexpected response ${response.status} ${response.statusText} ${await response.text()}`))
    } else {
      throw new Error(`${method} ${url} unexpected response ${response.status} ${response.statusText} ${await response.text()}`);
    }
  }
}